from django.db.models import Count
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect
from .models import Project, Task, User
from django.http import HttpResponse
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas 

@login_required(login_url='/login/')
def create_project_and_task_custom(request):
    if request.method == 'POST':
        # Extract project data
        name = request.POST.get('project_name')
        project_type = request.POST.get('project_type')
        start_date = request.POST.get('start_date')
        end_date = request.POST.get('estimated_end_date')
        description = request.POST.get('project_description')
        budget = request.POST.get('budget')
        priority = request.POST.get('priority')

        # Save the project
        project = Project.objects.create(
            name=name,
            project_type=project_type,
            description=description,
            start_date=start_date,
            end_date=end_date,
            client=request.user,
            budget=budget or 0,
            priority=priority
        )

        # Extract task data
        task_name = request.POST.get('task_name')
        task_type = request.POST.get('task_type')
        due_date = request.POST.get('task_due_date')
        task_description = request.POST.get('task_description')
        assign_to_id = request.POST.get('assign_to')

        assigned_user = User.objects.filter(id=assign_to_id, user_type='contractor').first() if assign_to_id else None

        # Save the task
        Task.objects.create(
            project=project,
            title=task_name,
            task_type=task_type,
            due_date=due_date,
            description=task_description,
            assigned_to=assigned_user
        )

        return redirect('client-dashboard')  # Or a success page

    contractors = User.objects.filter(user_type='contractor')
    return render(request, 'tasks.html', {'contractors': contractors})


@login_required(login_url='/login/')
def project_progress_view(request):
    projects = Project.objects.filter(client=request.user)

    # Convert QuerySet to list of dicts so it's JSON serializable
    status_data = list(projects.values('status').annotate(count=Count('id')))
    priority_data = list(projects.values('priority').annotate(count=Count('id')))
    print(staticmethod)

    return render(request, 'progress.html', {
        'status_data': status_data,
        'priority_data': priority_data
    })


@login_required
def download_project_progress_pdf(request):
    if request.user.user_type != 'client':
        return HttpResponse("Unauthorized", status=403)

    projects = Project.objects.filter(client=request.user)
    status_data = projects.values('status').annotate(count=Count('id'))
    priority_data = projects.values('priority').annotate(count=Count('id'))

    # Set up PDF response
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'inline; filename="project progress report.pdf"'


    p = canvas.Canvas(response, pagesize=A4)
    width, height = A4

    # Header
    p.setFont("Helvetica-Bold", 16)
    p.drawString(50, height - 50, "Project Progress Report")

    # Add client name
    p.setFont("Helvetica", 12)
    p.drawString(50, height - 80, f"Client: {request.user.get_full_name() or request.user.username}")

    y = height - 120

    # Status breakdown
    p.setFont("Helvetica-Bold", 14)
    p.drawString(50, y, "Project Status Summary:")
    y -= 20
    p.setFont("Helvetica", 12)
    for item in status_data:
        p.drawString(60, y, f"{item['status'].capitalize()}: {item['count']}")
        y -= 20

    y -= 10
    p.setFont("Helvetica-Bold", 14)
    p.drawString(50, y, "Project Priority Breakdown:")
    y -= 20
    p.setFont("Helvetica", 12)
    for item in priority_data:
        p.drawString(60, y, f"{item['priority'].capitalize()}: {item['count']}")
        y -= 20

    # Footer
    p.setFont("Helvetica-Oblique", 10)
    p.drawString(50, 30, "Generated by FCMS")

    p.showPage()
    p.save()

    return response
